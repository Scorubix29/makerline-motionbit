{"entries":[{"timestamp":1750469336342,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"3]J@H()Ty{So%4`1${l.\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"U`#X4-v-mI95J|^GO4rJ\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace MakerLine {\" line1=\"\" line2=\"    export enum SensorPosition {\" line3=\"        //% block=&quot;Left&quot;\" line4=\"        Left,\" line5=\"        //% block=&quot;Mid-Left&quot;\" line6=\"        MidLeft,\" line7=\"        //% block=&quot;Center&quot;\" line8=\"        Center,\" line9=\"        //% block=&quot;Mid-Right&quot;\" line10=\"        MidRight,\" line11=\"        //% block=&quot;Right&quot;\" line12=\"        Right\" line13=\"    }\" line14=\"\" line15=\"    const pinMap: DigitalPin[] = [DigitalPin.P0, DigitalPin.P1, DigitalPin.P2, DigitalPin.P8, DigitalPin.P12]\" line16=\"\" line17=\"    /**\" line18=\"     * Check if a sensor detects a line.\" line19=\"     */\" line20=\"    //% block=&quot;sensor $pos detects line&quot;\" line21=\"    //% group=&quot;Sensors&quot;\" line22=\"    export function isSensorDetectingLine(pos: SensorPosition): boolean {\" line23=\"        return pins.digitalReadPin(pinMap[pos]) === 0  // Assumes black = LOW\" line24=\"    }\" line25=\"\" line26=\"    /**\" line27=\"     * Follow line using basic logic\" line28=\"     */\" line29=\"    //% block=&quot;follow line at speed $speed&quot;\" line30=\"    //% group=&quot;Line Following&quot;\" line31=\"    export function followLine(speed: number): void {\" line32=\"        if (isSensorDetectingLine(SensorPosition.Center)) {\" line33=\"            moveForward(speed)\" line34=\"        } else if (isSensorDetectingLine(SensorPosition.MidLeft)) {\" line35=\"            turnLeft(speed)\" line36=\"        } else if (isSensorDetectingLine(SensorPosition.MidRight)) {\" line37=\"            turnRight(speed)\" line38=\"        } else {\" line39=\"            stopMotors()\" line40=\"        }\" line41=\"    }\" line42=\"\" line43=\"    /**\" line44=\"     * Move forward\" line45=\"     */\" line46=\"    //% block=&quot;move forward at speed $speed&quot;\" line47=\"    //% group=&quot;Motion&quot;\" line48=\"    export function moveForward(speed: number): void {\" line49=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line50=\"        pins.digitalWritePin(DigitalPin.P14, 0)\" line51=\"        pins.analogWritePin(AnalogPin.P15, speed)\" line52=\"        pins.digitalWritePin(DigitalPin.P16, 0)\" line53=\"    }\" line54=\"\" line55=\"    /**\" line56=\"     * Turn left\" line57=\"     */\" line58=\"    //% block=&quot;turn left at speed $speed&quot;\" line59=\"    //% group=&quot;Motion&quot;\" line60=\"    export function turnLeft(speed: number): void {\" line61=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line62=\"        pins.analogWritePin(AnalogPin.P15, speed)\" line63=\"    }\" line64=\"\" line65=\"    /**\" line66=\"     * Turn right\" line67=\"     */\" line68=\"    //% block=&quot;turn right at speed $speed&quot;\" line69=\"    //% group=&quot;Motion&quot;\" line70=\"    export function turnRight(speed: number): void {\" line71=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line72=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line73=\"    }\" line74=\"\" line75=\"    /**\" line76=\"     * Stop all motors\" line77=\"     */\" line78=\"    //% block=&quot;stop motors&quot;\" line79=\"    //% group=&quot;Motion&quot;\" line80=\"    export function stopMotors(): void {\" line81=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line82=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line83=\"    }\" line84=\"}\" numlines=\"85\"></mutation></block></statement></block>"],[1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":3546,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"namespace MakerLine {\n\n    export enum SensorPosition {\n        //% block=\"Left\"\n        Left,\n        //% block=\"Mid-Left\"\n        MidLeft,\n        //% block=\"Center\"\n        Center,\n        //% block=\"Mid-Right\"\n        MidRight,\n        //% block=\"Right\"\n        Right\n    }\n\n    const pinMap: DigitalPin[] = [DigitalPin.P0, DigitalPin.P1, DigitalPin.P2, DigitalPin.P8, DigitalPin.P12]\n\n    /**\n     * Check if a sensor detects a line.\n     */\n    //% block=\"sensor $pos detects line\"\n    //% group=\"Sensors\"\n    export function isSensorDetectingLine(pos: SensorPosition): boolean {\n        return pins.digitalReadPin(pinMap[pos]) === 0  // Assumes black = LOW\n    }\n\n    /**\n     * Follow line using basic logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (isSensorDetectingLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (isSensorDetectingLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else if (isSensorDetectingLine(SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(AnalogPin.P13, speed)\n        pins.digitalWritePin(DigitalPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, speed)\n        pins.digitalWritePin(DigitalPin.P16, 0)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P15, speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(AnalogPin.P13, speed)\n        pins.analogWritePin(AnalogPin.P15, 0)\n    }\n\n    /**\n     * Stop all motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(AnalogPin.P13, 0)\n        pins.analogWritePin(AnalogPin.P15, 0)\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":2299,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"makerline-motionbit\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Extension for 5 IR Line Sensors and Motion:bit motor control"],[1,"new extension\",\n    \"description\": \""],[0,"\",\n "]],"start1":11,"start2":11,"length1":134,"length2":44},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"microbit\": \"0.14.6\",\n        \"microbitSim\": \"0.14.6\",\n        \"target\": \"7.0.61\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":281,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]},{"timestamp":1750469823824,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"id=\""],[-1,"2oiYYv#dj^N[trVmY?`o"],[1,"3]J@H()Ty{So%4`1${l."],[0,"\" x=\""],[-1,"2"],[0,"0\" y=\""],[-1,"2"],[0,"0\"><"]],"start1":105,"start2":105,"length1":41,"length2":39},{"diffs":[[0,"id=\""],[-1,"Y+9BHYQyJ@HB)V8usPGu"],[1,"U`#X4-v-mI95J|^GO4rJ"],[0,"\"><m"]],"start1":204,"start2":204,"length1":28,"length2":28},{"diffs":[[0,"15=\"    "],[-1,"le"],[1,"cons"],[0,"t pinMap"]],"start1":735,"start2":735,"length1":18,"length2":20},{"diffs":[[0," = ["],[-1,"\" line16=\"        "],[0,"Digi"]],"start1":769,"start2":769,"length1":26,"length2":8},{"diffs":[[0,".P12"],[-1,"\" line17=\"    ] // default values"],[1,"]"],[0,"\" line1"],[-1,"8"],[1,"6"],[0,"=\"\" "]],"start1":843,"start2":843,"length1":49,"length2":17},{"diffs":[[0,"\"\" line1"],[-1,"9"],[1,"7"],[0,"=\"    /*"]],"start1":857,"start2":857,"length1":17,"length2":17},{"diffs":[[0,"line"],[-1,"20=\"     * Configure sensor pins manually.\" line21=\"     */\" line22=\"    //% block=&quot;set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right&quot;\" line23=\"    //% group=&quot;Setup&quot;\" line24=\"    export function setSensorPins(\" line25=\"        left: DigitalPin,\" line26=\"        midLeft: DigitalPin,\" line27=\"        center: DigitalPin,\" line28=\"        midRight: DigitalPin,\" line29=\"        right: DigitalPin\" line30=\"    ): void {\" line31=\"        pinMap = [left, midLeft, center, midRight, right]\" line32=\"    }\" line33=\"\" line34=\"    /**\" line35"],[1,"18"],[0,"=\"  "]],"start1":877,"start2":877,"length1":612,"length2":10},{"diffs":[[0,"line"],[-1,"36"],[1,"19"],[0,"=\"  "]],"start1":927,"start2":927,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"37"],[1,"20"],[0,"=\"  "]],"start1":944,"start2":944,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"38"],[1,"21"],[0,"=\"  "]],"start1":1004,"start2":1004,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"39"],[1,"22"],[0,"=\"  "]],"start1":1047,"start2":1047,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"40"],[1,"23"],[0,"=\"  "]],"start1":1130,"start2":1130,"length1":10,"length2":10},{"diffs":[[0,"line"],[1,"2"],[0,"4"],[-1,"1"],[0,"=\"  "]],"start1":1217,"start2":1217,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"4"],[0,"2"],[1,"5"],[0,"=\"\" line"],[-1,"43"],[1,"26"],[0,"=\"  "]],"start1":1232,"start2":1232,"length1":20,"length2":20},{"diffs":[[0,"line"],[-1,"44"],[1,"27"],[0,"=\"  "]],"start1":1259,"start2":1259,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"45"],[1,"28"],[0,"=\"  "]],"start1":1305,"start2":1305,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"46"],[1,"29"],[0,"=\"  "]],"start1":1322,"start2":1322,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"47"],[1,"30"],[0,"=\"  "]],"start1":1385,"start2":1385,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"48"],[1,"31"],[0,"=\"  "]],"start1":1435,"start2":1435,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"49"],[1,"32"],[0,"=\"  "]],"start1":1498,"start2":1498,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"50"],[1,"33"],[0,"=\"  "]],"start1":1567,"start2":1567,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"51"],[1,"34"],[0,"=\"  "]],"start1":1607,"start2":1607,"length1":10,"length2":10},{"diffs":[[0,"line"],[1,"3"],[0,"5"],[-1,"2"],[0,"=\"  "]],"start1":1684,"start2":1684,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"5"],[0,"3"],[1,"6"],[0,"=\"  "]],"start1":1721,"start2":1721,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"54"],[1,"37"],[0,"=\"  "]],"start1":1799,"start2":1799,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"55"],[1,"38"],[0,"=\"  "]],"start1":1837,"start2":1837,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"56"],[1,"39"],[0,"=\"  "]],"start1":1863,"start2":1863,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"57"],[1,"40"],[0,"=\"  "]],"start1":1897,"start2":1897,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"58"],[1,"41"],[0,"=\"  "]],"start1":1916,"start2":1916,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"59"],[1,"42"],[0,"=\"\" line"],[-1,"60"],[1,"43"],[0,"=\"  "]],"start1":1931,"start2":1931,"length1":20,"length2":20},{"diffs":[[0,"line"],[-1,"61"],[1,"44"],[0,"=\"  "]],"start1":1958,"start2":1958,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"62"],[1,"45"],[0,"=\"  "]],"start1":1987,"start2":1987,"length1":10,"length2":10},{"diffs":[[0,"line"],[1,"4"],[0,"6"],[-1,"3"],[0,"=\"  "]],"start1":2004,"start2":2004,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"6"],[0,"4"],[1,"7"],[0,"=\"  "]],"start1":2068,"start2":2068,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"65"],[1,"48"],[0,"=\"  "]],"start1":2110,"start2":2110,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"66"],[1,"49"],[0,"=\"  "]],"start1":2174,"start2":2174,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"67"],[1,"50"],[0,"=\"  "]],"start1":2233,"start2":2233,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"68"],[1,"51"],[0,"=\"  "]],"start1":2290,"start2":2290,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"69"],[1,"52"],[0,"=\"  "]],"start1":2349,"start2":2349,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"70"],[1,"53"],[0,"=\"  "]],"start1":2406,"start2":2406,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"71"],[1,"54"],[0,"=\"\" line"],[-1,"72"],[1,"55"],[0,"=\"  "]],"start1":2421,"start2":2421,"length1":20,"length2":20},{"diffs":[[0,"line"],[-1,"73"],[1,"56"],[0,"=\"  "]],"start1":2448,"start2":2448,"length1":10,"length2":10},{"diffs":[[0,"line"],[1,"5"],[0,"7"],[-1,"4"],[0,"=\"  "]],"start1":2474,"start2":2474,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"7"],[0,"5"],[1,"8"],[0,"=\"  "]],"start1":2491,"start2":2491,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"76"],[1,"59"],[0,"=\"  "]],"start1":2552,"start2":2552,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"77"],[1,"60"],[0,"=\"  "]],"start1":2594,"start2":2594,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"78"],[1,"61"],[0,"=\"  "]],"start1":2655,"start2":2655,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"79"],[1,"62"],[0,"=\"  "]],"start1":2710,"start2":2710,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"80"],[1,"63"],[0,"=\"  "]],"start1":2769,"start2":2769,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"81"],[1,"64"],[0,"=\"\" line"],[-1,"82"],[1,"65"],[0,"=\"  "]],"start1":2784,"start2":2784,"length1":20,"length2":20},{"diffs":[[0,"line"],[-1,"83"],[1,"66"],[0,"=\"  "]],"start1":2811,"start2":2811,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"84"],[1,"67"],[0,"=\"  "]],"start1":2838,"start2":2838,"length1":10,"length2":10},{"diffs":[[0,"line"],[1,"6"],[0,"8"],[-1,"5"],[0,"=\"  "]],"start1":2855,"start2":2855,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"8"],[0,"6"],[1,"9"],[0,"=\"  "]],"start1":2917,"start2":2917,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"8"],[0,"7"],[1,"0"],[0,"=\"  "]],"start1":2959,"start2":2959,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"88"],[1,"71"],[0,"=\"  "]],"start1":3021,"start2":3021,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"89"],[1,"72"],[0,"=\"  "]],"start1":3080,"start2":3080,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"90"],[1,"73"],[0,"=\"  "]],"start1":3135,"start2":3135,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"91"],[1,"74"],[0,"=\"\" line"],[-1,"92"],[1,"75"],[0,"=\"  "]],"start1":3150,"start2":3150,"length1":20,"length2":20},{"diffs":[[0,"line"],[-1,"93"],[1,"76"],[0,"=\"  "]],"start1":3177,"start2":3177,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"94"],[1,"77"],[0,"=\"  "]],"start1":3209,"start2":3209,"length1":10,"length2":10},{"diffs":[[0,"*/\" line"],[-1,"95"],[1,"78"],[0,"=\"    //"]],"start1":3222,"start2":3222,"length1":18,"length2":18},{"diffs":[[0,"line"],[1,"7"],[0,"9"],[-1,"6"],[0,"=\"  "]],"start1":3273,"start2":3273,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"97"],[1,"80"],[0,"=\"  "]],"start1":3315,"start2":3315,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"9"],[0,"8"],[1,"1"],[0,"=\"  "]],"start1":3365,"start2":3365,"length1":10,"length2":10},{"diffs":[[0,"0)\" line"],[-1,"99"],[1,"82"],[0,"=\"      "]],"start1":3416,"start2":3416,"length1":18,"length2":18},{"diffs":[[0,"line"],[-1,"100"],[1,"83"],[0,"=\"  "]],"start1":3475,"start2":3475,"length1":11,"length2":10},{"diffs":[[0,"line"],[-1,"101"],[1,"84"],[0,"=\"}\""]],"start1":3490,"start2":3490,"length1":11,"length2":10},{"diffs":[[0,"es=\""],[-1,"102"],[1,"85"],[0,"\"></"]],"start1":3507,"start2":3507,"length1":11,"length2":10}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n    "],[-1,"le"],[1,"cons"],[0,"t pinMap"]],"start1":275,"start2":275,"length1":18,"length2":20},{"diffs":[[0,"in[] = ["],[-1,"\n        "],[0,"DigitalP"]],"start1":305,"start2":305,"length1":25,"length2":16},{"diffs":[[0,".P12"],[-1,"\n    ] // default values\n\n    /**\n     * Configure sensor pins manually.\n     */\n    //% block=\"set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right\"\n    //% group=\"Setup\"\n    export function setSensorPins(\n        left: DigitalPin,\n        midLeft: DigitalPin,\n        center: DigitalPin,\n        midRight: DigitalPin,\n        right: DigitalPin\n    ): void {\n        pinMap = [left, midLeft, center, midRight, right]\n    }"],[1,"]"],[0,"\n\n  "]],"start1":383,"start2":383,"length1":479,"length2":9}]}]},{"timestamp":1750470488317,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#00AEEF\" weight=100 icon=\"\\uf1b9\" block=\"MakerLine\"\n"],[0,"name"]],"start1":0,"start2":0,"length1":67,"length2":4},{"diffs":[[0,"    "],[-1,"export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // Map sensor pins, user configurable\n    let pinMap: DigitalPin[] = [DigitalPin.P0, P1, P2, P8, P12]\n    let leftMotor: MotorChannel = MotorChannel.M1\n    let rightMotor: MotorChannel = MotorChannel.M2\n\n    // Motion:bit motor pin mappings (forward pins only for simplicity)\n    const motorPWMPins: AnalogPin[] = [Analog"],[1,"let pinMap: DigitalPin[] = [\n        DigitalPin.P0, Digital"],[0,"Pin.P1"],[-1,"3"],[0,", "],[-1,"AnalogPin.P14, AnalogPin.P15, AnalogPin.P16]\n\n    /**\n     * Set motor channels used for driving\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }"],[1,"DigitalPin.P2, DigitalPin.P8, DigitalPin.P12\n    ] // default values"],[0,"\n\n  "]],"start1":279,"start2":279,"length1":844,"length2":143},{"diffs":[[0,"]) === 0"],[1,"  // Assumes black = LOW"],[0,"\n    }\n\n"]],"start1":1108,"start2":1108,"length1":16,"length2":40},{"diffs":[[0,"ritePin("],[-1,"motorPWMPins[leftMotor]"],[1,"AnalogPin.P13"],[0,", speed)"]],"start1":1853,"start2":1853,"length1":39,"length2":29},{"diffs":[[0,"d)\n        pins."],[-1,"analog"],[1,"digital"],[0,"WritePin(motorPW"]],"start1":1880,"start2":1880,"length1":38,"length2":39},{"diffs":[[0,"Pin("],[-1,"motorPWMPins[rightMotor], speed"],[1,"DigitalPin.P14, 0)\n        pins.analogWritePin(AnalogPin.P15, speed)\n        pins.digitalWritePin(DigitalPin.P16, 0"],[0,")\n  "]],"start1":1908,"start2":1908,"length1":39,"length2":123},{"diffs":[[0,"ritePin("],[-1,"motorPWMPins[leftMotor]"],[1,"AnalogPin.P13"],[0,", 0)\n   "]],"start1":2206,"start2":2206,"length1":39,"length2":29},{"diffs":[[0,"Pin("],[-1,"motorPWMPins[rightMotor]"],[1,"AnalogPin.P15"],[0,", sp"]],"start1":2256,"start2":2256,"length1":32,"length2":21},{"diffs":[[0,"ritePin("],[-1,"motorPWMPins[leftMotor]"],[1,"AnalogPin.P13"],[0,", speed)"]],"start1":2462,"start2":2462,"length1":39,"length2":29},{"diffs":[[0,"Pin("],[-1,"motorPWMPins[rightMotor]"],[1,"AnalogPin.P15"],[0,", 0)"]],"start1":2516,"start2":2516,"length1":32,"length2":21},{"diffs":[[0,"     * Stop "],[1,"all "],[0,"motors\n     "]],"start1":2553,"start2":2553,"length1":24,"length2":28},{"diffs":[[0,"Pin("],[-1,"motorPWMPins[leftMotor]"],[1,"AnalogPin.P13"],[0,", 0)"]],"start1":2700,"start2":2700,"length1":31,"length2":21},{"diffs":[[0,"Pin("],[-1,"motorPWMPins[rightMotor]"],[1,"AnalogPin.P15"],[0,", 0)"]],"start1":2746,"start2":2746,"length1":32,"length2":21}]}]},{"timestamp":1750470498786,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"in[] = ["],[-1,"\n        "],[0,"DigitalP"]],"start1":585,"start2":585,"length1":25,"length2":16},{"diffs":[[0,".P0,"],[-1,"\n        DigitalPin.P1,\n        DigitalPin.P2,\n        DigitalPin.P8,\n        DigitalPin.P12\n    "],[1," P1, P2, P8, P12"],[0,"]\n  "]],"start1":603,"start2":603,"length1":105,"length2":24}]}]},{"timestamp":1750470575386,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"let pinMap: DigitalPin[] = [\n        DigitalPin.P0,  // Left\n        DigitalPin.P1,  // Mid-Left\n        DigitalPin.P2,  // Center\n        DigitalPin.P8,  // Mid-Right\n        DigitalPin.P12  // Right\n    ]\n"],[1,"export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // Map sensor pins, user configurable\n    let pinMap: DigitalPin[] = [\n        DigitalPin.P0,\n        DigitalPin.P1,\n        DigitalPin.P2,\n        DigitalPin.P8,\n        DigitalPin.P12\n    ]\n    let leftMotor: MotorChannel = MotorChannel.M1\n    let rightMotor: MotorChannel = MotorChannel.M2\n\n    // Motion:bit motor pin mappings (forward pins only for simplicity)\n    const motorPWMPins: AnalogPin[] = [AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16]\n\n    /**\n     * Set motor channels used for driving\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }\n\n    /**\n     * Configure sensor pins manually.\n     */\n    //% block=\"set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right\"\n    //% group=\"Setup\"\n    export function setSensorPins(\n        left: DigitalPin,\n        midLeft: DigitalPin,\n        center: DigitalPin,\n        midRight: DigitalPin,\n        right: DigitalPin\n    ): void {\n        pinMap = [left, midLeft, center, midRight, right]\n    }\n\n    /**\n     * Check if a sensor detects a line.\n     */"],[0,"\n   "]],"start1":342,"start2":342,"length1":215,"length2":1439},{"diffs":[[0,"cts "],[-1,"black "],[0,"line\"\n"],[1,"    //% group=\"Sensors\"\n"],[0,"    "]],"start1":1809,"start2":1809,"length1":20,"length2":38},{"diffs":[[0,"unction "],[-1,"s"],[1,"isS"],[0,"ensorDet"]],"start1":1855,"start2":1855,"length1":17,"length2":19},{"diffs":[[0,"n isSensorDetect"],[-1,"s"],[1,"ing"],[0,"Line(pos: Sensor"]],"start1":1861,"start2":1861,"length1":33,"length2":35},{"diffs":[[0,"pos]) =="],[1,"="],[0," 0\n    }"]],"start1":1959,"start2":1959,"length1":16,"length2":17},{"diffs":[[0,"   /"],[-1,"/% block=\"show sensor $pos on LED\"\n    export function showSensorOnLED(pos: SensorPosition): void {\n        basic.forever(function () {\n           "],[1,"**\n     * Follow line using basic logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (isSensorDetectingLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (isSensorDetectingLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else"],[0," if ("],[-1,"s"],[1,"isS"],[0,"enso"]],"start1":1979,"start2":1979,"length1":161,"length2":394},{"diffs":[[0,"tect"],[-1,"s"],[1,"ing"],[0,"Line("],[-1,"pos)) {\n                basic.showIcon(IconNames.Yes)\n            } else {\n                basic.clearScreen()\n        "],[1,"SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n"],[0,"    }\n"],[1,"\n"],[0,"    "],[-1,"    }"],[1,"/**\n     * Stop motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0"],[0,")\n  "]],"start1":2376,"start2":2376,"length1":148,"length2":1208}]}]},{"timestamp":1750471874201,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"n-start\""],[1," id=\"2oiYYv#dj^N[trVmY?`o\""],[0," x=\"20\" "]],"start1":96,"start2":96,"length1":16,"length2":42},{"diffs":[[0,"atement\""],[1," id=\"Y+9BHYQyJ@HB)V8usPGu\""],[0,"><mutati"]],"start1":197,"start2":197,"length1":16,"length2":42},{"diffs":[[0,"P0, "],[1,"DigitalPin.P1, DigitalPin.P2, DigitalPin.P8, DigitalPin.P12\" line17=\"    ]"],[0," // "],[-1,"Left\" line17=\"        DigitalPin.P1,  // Mid-Left"],[1,"default values\" line18=\"\" line19=\"    /**\" line20=\"     * Configure sensor pins manually.\" line21=\"     */\" line22=\"    //% block=&quot;set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right&quot;"],[0,"\" line"],[-1,"18"],[1,"23"],[0,"=\"    "],[-1,"    DigitalPin.P2,  // Center"],[1,"//% group=&quot;Setup&quot;\" line24=\"    export function setSensorPins(\" line25=\"        left: DigitalPin,\" line26=\"        midLeft: DigitalPin,"],[0,"\" line"],[-1,"19"],[1,"27"],[0,"=\"  "]],"start1":802,"start2":802,"length1":112,"length2":494},{"diffs":[[0," line27=\"       "],[1," center:"],[0," DigitalPin.P8, "]],"start1":1285,"start2":1285,"length1":32,"length2":40},{"diffs":[[0,"lPin"],[-1,".P8,  // M"],[1,",\" line28=\"        m"],[0,"id"],[-1,"-"],[0,"Right"],[1,": DigitalPin,"],[0,"\" line2"],[-1,"0"],[1,"9"],[0,"=\"  "]],"start1":1316,"start2":1316,"length1":34,"length2":56},{"diffs":[[0," line29=\"       "],[1," right:"],[0," DigitalPin.P12 "]],"start1":1361,"start2":1361,"length1":32,"length2":39},{"diffs":[[0,"lPin"],[-1,".P12  // Right"],[1,"\" line30=\"    ): void {\" line31=\"        pinMap = [left, midLeft, center, midRight, right]"],[0,"\" line"],[1,"3"],[0,"2"],[-1,"1"],[0,"=\"    "],[-1,"]"],[1,"}"],[0,"\" line"],[-1,"22"],[1,"33"],[0,"=\"\" line"],[-1,"23=\"    //% block=&quot;sensor $pos detects black line"],[1,"34=\"    /**\" line35=\"     * Check if a sensor detects a line.\" line36=\"     */\" line37=\"    //% block=&quot;sensor $pos detects line&quot;\" line38=\"    //% group=&quot;Sensors"],[0,"&quo"]],"start1":1391,"start2":1391,"length1":107,"length2":304},{"diffs":[[0,"sors&quot;\" line"],[-1,"24"],[1,"39"],[0,"=\"    export fun"]],"start1":1687,"start2":1687,"length1":34,"length2":34},{"diffs":[[0,"unction "],[-1,"s"],[1,"isS"],[0,"ensorDet"]],"start1":1719,"start2":1719,"length1":17,"length2":19},{"diffs":[[0,"n isSensorDetect"],[-1,"s"],[1,"ing"],[0,"Line(pos: Sensor"]],"start1":1725,"start2":1725,"length1":33,"length2":35},{"diffs":[[0,"lean {\" line"],[-1,"25"],[1,"40"],[0,"=\"        re"]],"start1":1774,"start2":1774,"length1":26,"length2":26},{"diffs":[[0,") =="],[1,"="],[0," 0"],[1,"  // Assumes black = LOW"],[0,"\" line"],[-1,"26"],[1,"41"],[0,"=\"  "]],"start1":1836,"start2":1836,"length1":18,"length2":43},{"diffs":[[0,"line"],[-1,"27=\""],[1,"42=\"\" line43=\"    /**\" line44=\"     * Follow line using basic logic\" line45=\"     */"],[0,"\" line"],[-1,"28"],[1,"46"],[0,"=\"  "]],"start1":1884,"start2":1884,"length1":20,"length2":100},{"diffs":[[0,"uot;"],[-1,"show sensor $pos on LED"],[1,"follow line at speed $speed&quot;\" line47=\"    //% group=&quot;Line Following"],[0,"&quo"]],"start1":1998,"start2":1998,"length1":31,"length2":85},{"diffs":[[0,"&quot;\" line"],[-1,"29"],[1,"48"],[0,"=\"    export"]],"start1":2079,"start2":2079,"length1":26,"length2":26},{"diffs":[[0,"ion "],[-1,"showSensorOnLED(pos: SensorPosition): void {"],[1,"followLine(speed: number): void {\" line49=\"        if (isSensorDetectingLine(SensorPosition.Center)) {\" line50=\"            moveForward(speed)"],[0,"\" line"],[-1,"30"],[1,"51"],[0,"=\"  "]],"start1":2111,"start2":2111,"length1":60,"length2":158},{"diffs":[[0,"    "],[-1,"basic.forever(function ("],[1,"} else if (isSensorDetectingLine(SensorPosition.MidLeft)"],[0,") {\""]],"start1":2271,"start2":2271,"length1":32,"length2":64},{"diffs":[[0,"idLeft)) {\" line"],[-1,"31"],[1,"52"],[0,"=\"            if"]],"start1":2324,"start2":2324,"length1":34,"length2":34},{"diffs":[[0,"    "],[1,"turnLeft(speed)\" line53=\"        } else "],[0,"if ("],[-1,"s"],[1,"isS"],[0,"enso"]],"start1":2352,"start2":2352,"length1":13,"length2":55},{"diffs":[[0,"tect"],[-1,"s"],[1,"ing"],[0,"Line("],[-1,"pos)) {\" line32=\"                basic.showIcon(IconNames.Yes"],[1,"SensorPosition.MidRight)) {\" line54=\"            turnRight(speed)\" line55=\"        } else {\" line56=\"            stopMotors()\" line57=\"        }\" line58=\"    }\" line59=\"\" line60=\"    /**\" line61=\"     * Move forward\" line62=\"     */\" line63=\"    //% block=&quot;move forward at speed $speed&quot;\" line64=\"    //% group=&quot;Motion&quot;\" line65=\"    export function moveForward(speed: number): void {\" line66=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line67=\"        pins.digitalWritePin(DigitalPin.P14, 0)\" line68=\"        pins.analogWritePin(AnalogPin.P15, speed"],[0,")\" line"],[-1,"33"],[1,"69"],[0,"=\"  "]],"start1":2410,"start2":2410,"length1":84,"length2":601},{"diffs":[[0,"    "],[-1,"    } else {"],[1,"pins.digitalWritePin(DigitalPin.P16, 0)\" line70=\"    }\" line71=\"\" line72=\"    /**"],[0,"\" line"],[1,"7"],[0,"3"],[-1,"4"],[0,"=\"     "],[-1,"           basic.clearScreen()\" line35=\"            }\" line36=\"        })\" line37"],[1,"* Turn left\" line74=\"     */\" line75=\"    //% block=&quot;turn left at speed $speed&quot;\" line76=\"    //% group=&quot;Motion&quot;\" line77=\"    export function turnLeft(speed: number): void {\" line78=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line79=\"        pins.analogWritePin(AnalogPin.P15, speed)\" line80=\"    }\" line81=\"\" line82=\"    /**\" line83=\"     * Turn right\" line84=\"     */\" line85=\"    //% block=&quot;turn right at speed $speed&quot;\" line86=\"    //% group=&quot;Motion&quot;\" line87=\"    export function turnRight(speed: number): void {\" line88=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line89=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line90=\"    }\" line91=\"\" line92=\"    /**\" line93=\"     * Stop all motors\" line94=\"     */\" line95=\"    //% block=&quot;stop motors&quot;\" line96=\"    //% group=&quot;Motion&quot;\" line97=\"    export function stopMotors(): void {\" line98=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line99=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line100"],[0,"=\"  "]],"start1":3013,"start2":3013,"length1":116,"length2":1125},{"diffs":[[0," }\" line"],[-1,"38"],[1,"101"],[0,"=\"}\" num"]],"start1":4139,"start2":4139,"length1":18,"length2":19},{"diffs":[[0,"mlines=\""],[-1,"39"],[1,"102"],[0,"\"></muta"]],"start1":4157,"start2":4157,"length1":18,"length2":19}]}]},{"timestamp":1750472037208,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"sr:}1NBX)lsk%x}4SGjg\""],[0," x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":100,"start2":100,"length1":44,"length2":20},{"diffs":[[0,"ent\""],[-1," id=\"kFH#S;1=O,UK!VUY9)wE\""],[0,"><mu"]],"start1":175,"start2":175,"length1":34,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // IR sensor pin map (default wiring)\n"],[0,"    "]],"start1":338,"start2":338,"length1":227,"length2":8},{"diffs":[[0,"DigitalPin.P"],[-1,"13"],[1,"0"],[0,",  // Left\n "]],"start1":383,"start2":383,"length1":26,"length2":25},{"diffs":[[0,"alPin.P1"],[-1,"5"],[0,",  // Mi"]],"start1":420,"start2":420,"length1":17,"length2":16},{"diffs":[[0,"talPin.P"],[-1,"14"],[1,"2"],[0,",  // Ce"]],"start1":455,"start2":455,"length1":18,"length2":17},{"diffs":[[0,"talPin.P"],[-1,"13"],[1,"8"],[0,",  // Mi"]],"start1":489,"start2":489,"length1":18,"length2":17},{"diffs":[[0,"in.P12  "],[-1,"  "],[0,"// Right"]],"start1":530,"start2":530,"length1":18,"length2":16},{"diffs":[[0," ]\n\n"],[-1,"    let leftMotor = MotorChannel.M1\n    let rightMotor = MotorChannel.M2\n\n    const motorPWMPins: AnalogPin[] = [\n        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\n    ]\n\n    /**\n     * Set the motor channels used for Motion:bit driving.\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }\n\n    /**\n     * Sensor detects black line\n     */\n"],[0,"    "]],"start1":550,"start2":550,"length1":546,"length2":8},{"diffs":[[0,"ne\"\n"],[-1,"    //% group=\"Sensors\"\n"],[0,"    "]],"start1":597,"start2":597,"length1":32,"length2":8},{"diffs":[[0," }\n\n"],[-1,"    /**\n     * Show sensor state on LED (for testing)\n     */\n"],[0,"    "]],"start1":727,"start2":727,"length1":70,"length2":8},{"diffs":[[0,"ED\"\n"],[-1,"    //% group=\"Debug\"\n"],[0,"    "]],"start1":767,"start2":767,"length1":30,"length2":8},{"diffs":[[0,"  }\n"],[-1,"\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Stop both motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Basic line following logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (sensorDetectsLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n"],[0,"}"],[1,"\n"]],"start1":1044,"start2":1044,"length1":1606,"length2":6}]}]},{"timestamp":1750472634865,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"id=\""],[-1,".Bvk$Rj1.%Bz(N0*0g^r"],[1,"sr:}1NBX)lsk%x}4SGjg"],[0,"\" x=\""],[-1,"2"],[0,"0\" y=\""],[-1,"2"],[0,"0\"><"]],"start1":105,"start2":105,"length1":41,"length2":39},{"diffs":[[0,"id=\""],[-1,"-,TtTn4Nm-$e)k4PgswQ"],[1,"kFH#S;1=O,UK!VUY9)wE"],[0,"\"><m"]],"start1":204,"start2":204,"length1":28,"length2":28},{"diffs":[[0,"15=\""],[-1,"    export enum MotorChannel {\" line16=\"        //% block=&quot;M1&quot;\" line17=\"        M1,\" line18=\"        //% block=&quot;M2&quot;\" line19=\"        M2,\" line20=\"        //% block=&quot;M3&quot;\" line21=\"        M3,\" line22=\"        //% block=&quot;M4&quot;\" line23=\"        M4\" line24=\"    }\" line25=\"\" line26=\"    // IR sensor pin map (default wiring)\" line27=\""],[0,"    "]],"start1":735,"start2":735,"length1":375,"length2":8},{"diffs":[[0," [\" line"],[-1,"28"],[1,"16"],[0,"=\"      "]],"start1":769,"start2":769,"length1":18,"length2":18},{"diffs":[[0,"talPin.P"],[-1,"16"],[1,"0"],[0,",  // Le"]],"start1":793,"start2":793,"length1":18,"length2":17},{"diffs":[[0,"ft\" line"],[-1,"29"],[1,"17"],[0,"=\"      "]],"start1":810,"start2":810,"length1":18,"length2":18},{"diffs":[[0,"alPin.P1"],[-1,"5"],[0,",  // Mi"]],"start1":835,"start2":835,"length1":17,"length2":16},{"diffs":[[0,"ft\" line"],[-1,"30"],[1,"18"],[0,"=\"      "]],"start1":855,"start2":855,"length1":18,"length2":18},{"diffs":[[0,"talPin.P"],[-1,"14"],[1,"2"],[0,",  // Ce"]],"start1":879,"start2":879,"length1":18,"length2":17},{"diffs":[[0,"er\" line"],[-1,"3"],[0,"1"],[1,"9"],[0,"=\"      "]],"start1":898,"start2":898,"length1":18,"length2":18},{"diffs":[[0,"talPin.P"],[-1,"13"],[1,"8"],[0,",  // Mi"]],"start1":922,"start2":922,"length1":18,"length2":17},{"diffs":[[0,"ht\" line"],[-1,"3"],[0,"2"],[1,"0"],[0,"=\"      "]],"start1":944,"start2":944,"length1":18,"length2":18},{"diffs":[[0,"in.P12  "],[-1,"  "],[0,"// Right"]],"start1":972,"start2":972,"length1":18,"length2":16},{"diffs":[[0,"line"],[-1,"33=\"    ]\" line34=\"\" line35=\"    let leftMotor = MotorChannel.M1\" line36=\"    let rightMotor = MotorChannel.M2\" line37=\"\" line38=\"    const motorPWMPins: AnalogPin[] = [\" line39=\"        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\" line40=\"    ]\" line41=\"\" line42=\"    /**\" line43=\"     * Set the motor channels used for Motion:bit driving.\" line44=\"     */\" line45=\"    //% block=&quot;set left motor to $left and right motor to $right&quot;\" line46=\"    //% group=&quot;Setup&quot;\" line47=\"    export function setMotors(left: MotorChannel, right: MotorChannel): void {\" line48=\"        leftMotor = left\" line49=\"        rightMotor = right\" line50=\"    }\" line51=\"\" line52=\"    /**\" line53=\"     * Sensor detects black line\" line54=\"     */\" line55"],[1,"21=\"    ]\" line22=\"\" line23"],[0,"=\"  "]],"start1":990,"start2":990,"length1":773,"length2":35},{"diffs":[[0,"line"],[-1,"56=\"    //% group=&quot;Sensors&quot;\" line57"],[1,"24"],[0,"=\"  "]],"start1":1081,"start2":1081,"length1":53,"length2":10},{"diffs":[[0,"line"],[1,"2"],[0,"5"],[-1,"8"],[0,"=\"  "]],"start1":1160,"start2":1160,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"59"],[1,"26"],[0,"=\"  "]],"start1":1222,"start2":1222,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"60"],[1,"27"],[0,"=\"\" line"],[-1,"61=\"    /**\" line62=\"     * Show sensor state on LED (for testing)\" line63=\"     */\" line64"],[1,"28"],[0,"=\"  "]],"start1":1237,"start2":1237,"length1":109,"length2":20},{"diffs":[[0,"line"],[-1,"65=\"    //% group=&quot;Debug&quot;\" line66"],[1,"29"],[0,"=\"  "]],"start1":1306,"start2":1306,"length1":51,"length2":10},{"diffs":[[0,"line"],[-1,"67"],[1,"30"],[0,"=\"  "]],"start1":1380,"start2":1380,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"68"],[1,"31"],[0,"=\"  "]],"start1":1425,"start2":1425,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"69"],[1,"32"],[0,"=\"  "]],"start1":1476,"start2":1476,"length1":10,"length2":10},{"diffs":[[0,"line"],[-1,"70=\"            } else {\" line71=\"                basic.clearScreen()\" line72=\"            }\" line73=\"        })\" line74=\"    }\" line75=\"\" line76=\"    /**\" line77=\"     * Move forward\" line78=\"     */\" line79=\"    //% block=&quot;move forward at speed $speed&quot;\" line80=\"    //% group=&quot;Motion&quot;\" line81=\"    export function moveForward(speed: number): void {\" line82=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line83=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line84=\"    }\" line85=\"\" line86=\"    /**\" line87=\"     * Turn left\" line88=\"     */\" line89=\"    //% block=&quot;turn left at speed $speed&quot;\" line90=\"    //% group=&quot;Motion&quot;\" line91=\"    export function turnLeft(speed: number): void {\" line92=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line93=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line94=\"    }\" line95=\"\" line96=\"    /**\" line97=\"     * Turn right\" line98=\"     */\" line99=\"    //% block=&quot;turn right at speed $speed&quot;\" line100=\"    //% group=&quot;Motion&quot;\" line101=\"    export function turnRight(speed: number): void {\" line102=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line103=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line104=\"    }\" line105=\"\" line106=\"    /**\" line107=\"     * Stop both motors\" line108=\"     */\" line109=\"    //% block=&quot;stop motors&quot;\" line110=\"    //% group=&quot;Motion&quot;\" line111=\"    export function stopMotors(): void {\" line112=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line113=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line114=\"    }\" line115=\"\" line116=\"    /**\" line117=\"     * Basic line following logic\" line118=\"     */\" line119=\"    //% block=&quot;follow line at speed $speed&quot;\" line120=\"    //% group=&quot;Line Following&quot;\" line121=\"    export function followLine(speed: number): void {\" line122=\"        if (sensorDetectsLine(SensorPosition.Center)) {\" line123=\"            moveForward(speed)\" line124=\"        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\" line125=\"            turnLeft(speed)\" line126=\"        } else if (sensorDetectsLine(SensorPosition.MidRight)) {"],[1,"33=\"            } else {\" line34=\"                basic.clearScreen()\" line35=\"            }\" line36=\"        })"],[0,"\" line"],[-1,"12"],[1,"3"],[0,"7=\"    "],[-1,"        turnRight(speed)\" line128=\"        } else {\" line129=\"            stopMotors()\" line130=\"        }\" line131=\"    }\" line132"],[1,"}\" line38"],[0,"=\"}\""]],"start1":1531,"start2":1531,"length1":2390,"length2":143},{"diffs":[[0,"es=\""],[-1,"13"],[0,"3"],[1,"9"],[0,"\"></"]],"start1":1681,"start2":1681,"length1":11,"length2":10}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"//% color=\"#00AEEF\" weight=100 icon=\"\\uf1b9\" block=\"MakerLine\"\n"],[0,"namespac"]],"start1":0,"start2":0,"length1":8,"length2":71},{"diffs":[[0,"alPin.P1"],[-1,"6"],[1,"3"],[0,",  // Le"]],"start1":607,"start2":607,"length1":17,"length2":17},{"diffs":[[0,"\n    }\n}"],[-1,"\n"]],"start1":3513,"start2":3513,"length1":9,"length2":8}]}]},{"timestamp":1750472662434,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"hannel.M"],[1,"1"],[0,"\n    let"]],"start1":742,"start2":742,"length1":16,"length2":17}]}]},{"timestamp":1750473344114,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"hannel.M"],[-1,"1"],[0,"\n    let"]],"start1":742,"start2":742,"length1":17,"length2":16}]}]},{"timestamp":1750473876161,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[1,"s://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\".Bvk$Rj1.%Bz(N0*0g^r\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"-,TtTn4Nm-$e)k4PgswQ\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace MakerLine {\" line1=\"\" line2=\"    export enum SensorPosition {\" line3=\"        //% block=&quot;Left&quot;\" line4=\"        Left,\" line5=\"        //% block=&quot;Mid-Left&quot;\" line6=\"        MidLeft,\" line7=\"        //% block=&quot;Center&quot;\" line8=\"        Center,\" line9=\"        //% block=&quot;Mid-Right&quot;\" line10=\"        MidRight,\" line11=\"        //% block=&quot;Right&quot;\" line12=\"        Right\" line13=\"    }\" line14=\"\" line15=\"    export enum MotorChannel {\" line16=\"        //% block=&quot;M1&quot;\" line17=\"        M1,\" line18=\"        //% block=&quot;M2&quot;\" line19=\"        M2,\" line20=\"        //% block=&quot;M3&quot;\" line21=\"        M3,\" line22=\"        //% block=&quot;M4&quot;\" line23=\"        M4\" line24=\"    }\" line25=\"\" line26=\"    // IR sensor pin map (default wiring)\" line27=\"    let pinMap: DigitalPin[] = [\" line28=\"        DigitalPin.P16,  // Left\" line29=\"        DigitalPin.P15,  // Mid-Left\" line30=\"        DigitalPin.P14,  // Center\" line31=\"        DigitalPin.P13,  // Mid-Right\" line32=\"        DigitalPin.P12    // Right\" line33=\"    ]\" line34=\"\" line35=\"    let leftMotor = MotorChannel.M1\" line36=\"    let rightMotor = MotorChannel.M2\" line37=\"\" line38=\"    const motorPWMPins: AnalogPin[] = [\" line39=\"        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\" line40=\"    ]\" line41=\"\" line42=\"    /**\" line43=\"     * Set the motor channels used for Motion:bit driving.\" line44=\"     */\" line45=\"    //% block=&quot;set left motor to $left and right motor to $right&quot;\" line46=\"    //% group=&quot;Setup&quot;\" line47=\"    export function setMotors(left: MotorChannel, right: MotorChannel): void {\" line48=\"        leftMotor = left\" line49=\"        rightMotor = right\" line50=\"    }\" line51=\"\" line52=\"    /**\" line53=\"     * Sensor detects black line\" line54=\"     */\" line55=\"    //% block=&quot;sensor $pos detects black line&quot;\" line56=\"    //% group=&quot;Sensors&quot;\" line57=\"    export function sensorDetectsLine(pos: SensorPosition): boolean {\" line58=\"        return pins.digitalReadPin(pinMap[pos]) == 0\" line59=\"    }\" line60=\"\" line61=\"    /**\" line62=\"     * Show sensor state on LED (for testing)\" line63=\"     */\" line64=\"    //% block=&quot;show sensor $pos on LED&quot;\" line65=\"    //% group=&quot;Debug&quot;\" line66=\"    export function showSensorOnLED(pos: SensorPosition): void {\" line67=\"        basic.forever(function () {\" line68=\"            if (sensorDetectsLine(pos)) {\" line69=\"                basic.showIcon(IconNames.Yes)\" line70=\"            } else {\" line71=\"                basic.clearScreen()\" line72=\"            }\" line73=\"        })\" line74=\"    }\" line75=\"\" line76=\"    /**\" line77=\"     * Move forward\" line78=\"     */\" line79=\"    //% block=&quot;move forward at speed $speed&quot;\" line80=\"    //% group=&quot;Motion&quot;\" line81=\"    export function moveForward(speed: number): void {\" line82=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line83=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line84=\"    }\" line85=\"\" line86=\"    /**\" line87=\"     * Turn left\" line88=\"     */\" line89=\"    //% block=&quot;turn left at speed $speed&quot;\" line90=\"    //% group=&quot;Motion&quot;\" line91=\"    export function turnLeft(speed: number): void {\" line92=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line93=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line94=\"    }\" line95=\"\" line96=\"    /**\" line97=\"     * Turn right\" line98=\"     */\" line99=\"    //% block=&quot;turn right at speed $speed&quot;\" line100=\"    //% group=&quot;Motion&quot;\" line101=\"    export function turnRight(speed: number): void {\" line102=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line103=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line104=\"    }\" line105=\"\" line106=\"    /**\" line107=\"     * Stop both motors\" line108=\"     */\" line109=\"    //% block=&quot;stop motors&quot;\" line110=\"    //% group=&quot;Motion&quot;\" line111=\"    export function stopMotors(): void {\" line112=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line113=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line114=\"    }\" line115=\"\" line116=\"    /**\" line117=\"     * Basic line following logic\" line118=\"     */\" line119=\"    //% block=&quot;follow line at speed $speed&quot;\" line120=\"    //% group=&quot;Line Following&quot;\" line121=\"    export function followLine(speed: number): void {\" line122=\"        if (sensorDetectsLine(SensorPosition.Center)) {\" line123=\"            moveForward(speed)\" line124=\"        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\" line125=\"            turnLeft(speed)\" line126=\"        } else if (sensorDetectsLine(SensorPosition.MidRight)) {\" line127=\"            turnRight(speed)\" line128=\"        } else {\" line129=\"            stopMotors()\" line130=\"        }\" line131=\"    }\" line132=\"}\" numlines=\"133\"></mutation></block></statement></block>"],[0,"</xm"]],"start1":12,"start2":12,"length1":113,"length2":5254}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"namespace MakerLine {\n\n    export enum SensorPosition {\n        //% block=\"Left\"\n        Left,\n        //% block=\"Mid-Left\"\n        MidLeft,\n        //% block=\"Center\"\n        Center,\n        //% block=\"Mid-Right\"\n        MidRight,\n        //% block=\"Right\"\n        Right\n    }\n\n    export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // IR sensor pin map (default wiring)\n    let pinMap: DigitalPin[] = [\n        DigitalPin.P16,  // Left\n        DigitalPin.P15,  // Mid-Left\n        DigitalPin.P14,  // Center\n        DigitalPin.P13,  // Mid-Right\n        DigitalPin.P12    // Right\n    ]\n\n    let leftMotor = MotorChannel.M1\n    let rightMotor = MotorChannel.M2\n\n    const motorPWMPins: AnalogPin[] = [\n        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\n    ]\n\n    /**\n     * Set the motor channels used for Motion:bit driving.\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }\n\n    /**\n     * Sensor detects black line\n     */\n    //% block=\"sensor $pos detects black line\"\n    //% group=\"Sensors\"\n    export function sensorDetectsLine(pos: SensorPosition): boolean {\n        return pins.digitalReadPin(pinMap[pos]) == 0\n    }\n\n    /**\n     * Show sensor state on LED (for testing)\n     */\n    //% block=\"show sensor $pos on LED\"\n    //% group=\"Debug\"\n    export function showSensorOnLED(pos: SensorPosition): void {\n        basic.forever(function () {\n            if (sensorDetectsLine(pos)) {\n                basic.showIcon(IconNames.Yes)\n            } else {\n                basic.clearScreen()\n            }\n        })\n    }\n\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Stop both motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Basic line following logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (sensorDetectsLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":3459}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \"0.0."],[-1,"0"],[1,"1"],[0,"\",\n    \""]],"start1":49,"start2":49,"length1":17,"length2":17},{"diffs":[[0,"tion\": \""],[1,"Extension for 5 IR Line Sensors and Motion:bit motor control"],[0,"\",\n    \""]],"start1":73,"start2":73,"length1":16,"length2":76},{"diffs":[[0,": [\n"],[-1,"        \"README.md\",\n"],[0,"    "]],"start1":253,"start2":253,"length1":29,"length2":8},{"diffs":[[0,"   \"main.ts\""],[1,",\n        \"README.md\""],[0,"\n    ],\n    "]],"start1":285,"start2":285,"length1":24,"length2":45},{"diffs":[[0,"   \""],[-1,"public\": true"],[1,"targetVersions\": {\n        \"microbit\": \"0.14.6\",\n        \"microbitSim\": \"0.14.6\",\n        \"target\": \"7.0.61\",\n        \"targetId\": \"microbit\"\n    }"],[0,",\n  "]],"start1":371,"start2":371,"length1":21,"length2":154},{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":591,"start2":591,"length1":21,"length2":17}]}]}],"snapshots":[{"timestamp":1750469336341,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"new extension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1750471855583,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"2oiYYv#dj^N[trVmY?`o\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"Y+9BHYQyJ@HB)V8usPGu\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace MakerLine {\" line1=\"\" line2=\"    export enum SensorPosition {\" line3=\"        //% block=&quot;Left&quot;\" line4=\"        Left,\" line5=\"        //% block=&quot;Mid-Left&quot;\" line6=\"        MidLeft,\" line7=\"        //% block=&quot;Center&quot;\" line8=\"        Center,\" line9=\"        //% block=&quot;Mid-Right&quot;\" line10=\"        MidRight,\" line11=\"        //% block=&quot;Right&quot;\" line12=\"        Right\" line13=\"    }\" line14=\"\" line15=\"    let pinMap: DigitalPin[] = [\" line16=\"        DigitalPin.P0, DigitalPin.P1, DigitalPin.P2, DigitalPin.P8, DigitalPin.P12\" line17=\"    ] // default values\" line18=\"\" line19=\"    /**\" line20=\"     * Configure sensor pins manually.\" line21=\"     */\" line22=\"    //% block=&quot;set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right&quot;\" line23=\"    //% group=&quot;Setup&quot;\" line24=\"    export function setSensorPins(\" line25=\"        left: DigitalPin,\" line26=\"        midLeft: DigitalPin,\" line27=\"        center: DigitalPin,\" line28=\"        midRight: DigitalPin,\" line29=\"        right: DigitalPin\" line30=\"    ): void {\" line31=\"        pinMap = [left, midLeft, center, midRight, right]\" line32=\"    }\" line33=\"\" line34=\"    /**\" line35=\"     * Check if a sensor detects a line.\" line36=\"     */\" line37=\"    //% block=&quot;sensor $pos detects line&quot;\" line38=\"    //% group=&quot;Sensors&quot;\" line39=\"    export function isSensorDetectingLine(pos: SensorPosition): boolean {\" line40=\"        return pins.digitalReadPin(pinMap[pos]) === 0  // Assumes black = LOW\" line41=\"    }\" line42=\"\" line43=\"    /**\" line44=\"     * Follow line using basic logic\" line45=\"     */\" line46=\"    //% block=&quot;follow line at speed $speed&quot;\" line47=\"    //% group=&quot;Line Following&quot;\" line48=\"    export function followLine(speed: number): void {\" line49=\"        if (isSensorDetectingLine(SensorPosition.Center)) {\" line50=\"            moveForward(speed)\" line51=\"        } else if (isSensorDetectingLine(SensorPosition.MidLeft)) {\" line52=\"            turnLeft(speed)\" line53=\"        } else if (isSensorDetectingLine(SensorPosition.MidRight)) {\" line54=\"            turnRight(speed)\" line55=\"        } else {\" line56=\"            stopMotors()\" line57=\"        }\" line58=\"    }\" line59=\"\" line60=\"    /**\" line61=\"     * Move forward\" line62=\"     */\" line63=\"    //% block=&quot;move forward at speed $speed&quot;\" line64=\"    //% group=&quot;Motion&quot;\" line65=\"    export function moveForward(speed: number): void {\" line66=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line67=\"        pins.digitalWritePin(DigitalPin.P14, 0)\" line68=\"        pins.analogWritePin(AnalogPin.P15, speed)\" line69=\"        pins.digitalWritePin(DigitalPin.P16, 0)\" line70=\"    }\" line71=\"\" line72=\"    /**\" line73=\"     * Turn left\" line74=\"     */\" line75=\"    //% block=&quot;turn left at speed $speed&quot;\" line76=\"    //% group=&quot;Motion&quot;\" line77=\"    export function turnLeft(speed: number): void {\" line78=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line79=\"        pins.analogWritePin(AnalogPin.P15, speed)\" line80=\"    }\" line81=\"\" line82=\"    /**\" line83=\"     * Turn right\" line84=\"     */\" line85=\"    //% block=&quot;turn right at speed $speed&quot;\" line86=\"    //% group=&quot;Motion&quot;\" line87=\"    export function turnRight(speed: number): void {\" line88=\"        pins.analogWritePin(AnalogPin.P13, speed)\" line89=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line90=\"    }\" line91=\"\" line92=\"    /**\" line93=\"     * Stop all motors\" line94=\"     */\" line95=\"    //% block=&quot;stop motors&quot;\" line96=\"    //% group=&quot;Motion&quot;\" line97=\"    export function stopMotors(): void {\" line98=\"        pins.analogWritePin(AnalogPin.P13, 0)\" line99=\"        pins.analogWritePin(AnalogPin.P15, 0)\" line100=\"    }\" line101=\"}\" numlines=\"102\"></mutation></block></statement></block></xml>","main.ts":"//% color=\"#00AEEF\" weight=100 icon=\"\\uf1b9\" block=\"MakerLine\"\nnamespace MakerLine {\n\n    export enum SensorPosition {\n        //% block=\"Left\"\n        Left,\n        //% block=\"Mid-Left\"\n        MidLeft,\n        //% block=\"Center\"\n        Center,\n        //% block=\"Mid-Right\"\n        MidRight,\n        //% block=\"Right\"\n        Right\n    }\n\n    export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // Map sensor pins, user configurable\n    let pinMap: DigitalPin[] = [\n        DigitalPin.P0,\n        DigitalPin.P1,\n        DigitalPin.P2,\n        DigitalPin.P8,\n        DigitalPin.P12\n    ]\n    let leftMotor: MotorChannel = MotorChannel.M1\n    let rightMotor: MotorChannel = MotorChannel.M2\n\n    // Motion:bit motor pin mappings (forward pins only for simplicity)\n    const motorPWMPins: AnalogPin[] = [AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16]\n\n    /**\n     * Set motor channels used for driving\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }\n\n    /**\n     * Configure sensor pins manually.\n     */\n    //% block=\"set sensor pins to Left: $left Mid-Left: $midLeft Center: $center Mid-Right: $midRight Right: $right\"\n    //% group=\"Setup\"\n    export function setSensorPins(\n        left: DigitalPin,\n        midLeft: DigitalPin,\n        center: DigitalPin,\n        midRight: DigitalPin,\n        right: DigitalPin\n    ): void {\n        pinMap = [left, midLeft, center, midRight, right]\n    }\n\n    /**\n     * Check if a sensor detects a line.\n     */\n    //% block=\"sensor $pos detects line\"\n    //% group=\"Sensors\"\n    export function isSensorDetectingLine(pos: SensorPosition): boolean {\n        return pins.digitalReadPin(pinMap[pos]) === 0\n    }\n\n    /**\n     * Follow line using basic logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (isSensorDetectingLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (isSensorDetectingLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else if (isSensorDetectingLine(SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Stop motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n}\n","README.md":"\n> Open this page at [https://scorubix29.github.io/makerline-motionbit/](https://scorubix29.github.io/makerline-motionbit/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/scorubix29/makerline-motionbit** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/scorubix29/makerline-motionbit** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","pxt.json":"{\n    \"name\": \"makerline-motionbit\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Extension for 5 IR Line Sensors and Motion:bit motor control\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"microbit\": \"0.14.6\",\n        \"microbitSim\": \"0.14.6\",\n        \"target\": \"7.0.61\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}},{"timestamp":1750473873552,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\".Bvk$Rj1.%Bz(N0*0g^r\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"-,TtTn4Nm-$e)k4PgswQ\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace MakerLine {\" line1=\"\" line2=\"    export enum SensorPosition {\" line3=\"        //% block=&quot;Left&quot;\" line4=\"        Left,\" line5=\"        //% block=&quot;Mid-Left&quot;\" line6=\"        MidLeft,\" line7=\"        //% block=&quot;Center&quot;\" line8=\"        Center,\" line9=\"        //% block=&quot;Mid-Right&quot;\" line10=\"        MidRight,\" line11=\"        //% block=&quot;Right&quot;\" line12=\"        Right\" line13=\"    }\" line14=\"\" line15=\"    export enum MotorChannel {\" line16=\"        //% block=&quot;M1&quot;\" line17=\"        M1,\" line18=\"        //% block=&quot;M2&quot;\" line19=\"        M2,\" line20=\"        //% block=&quot;M3&quot;\" line21=\"        M3,\" line22=\"        //% block=&quot;M4&quot;\" line23=\"        M4\" line24=\"    }\" line25=\"\" line26=\"    // IR sensor pin map (default wiring)\" line27=\"    let pinMap: DigitalPin[] = [\" line28=\"        DigitalPin.P16,  // Left\" line29=\"        DigitalPin.P15,  // Mid-Left\" line30=\"        DigitalPin.P14,  // Center\" line31=\"        DigitalPin.P13,  // Mid-Right\" line32=\"        DigitalPin.P12    // Right\" line33=\"    ]\" line34=\"\" line35=\"    let leftMotor = MotorChannel.M1\" line36=\"    let rightMotor = MotorChannel.M2\" line37=\"\" line38=\"    const motorPWMPins: AnalogPin[] = [\" line39=\"        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\" line40=\"    ]\" line41=\"\" line42=\"    /**\" line43=\"     * Set the motor channels used for Motion:bit driving.\" line44=\"     */\" line45=\"    //% block=&quot;set left motor to $left and right motor to $right&quot;\" line46=\"    //% group=&quot;Setup&quot;\" line47=\"    export function setMotors(left: MotorChannel, right: MotorChannel): void {\" line48=\"        leftMotor = left\" line49=\"        rightMotor = right\" line50=\"    }\" line51=\"\" line52=\"    /**\" line53=\"     * Sensor detects black line\" line54=\"     */\" line55=\"    //% block=&quot;sensor $pos detects black line&quot;\" line56=\"    //% group=&quot;Sensors&quot;\" line57=\"    export function sensorDetectsLine(pos: SensorPosition): boolean {\" line58=\"        return pins.digitalReadPin(pinMap[pos]) == 0\" line59=\"    }\" line60=\"\" line61=\"    /**\" line62=\"     * Show sensor state on LED (for testing)\" line63=\"     */\" line64=\"    //% block=&quot;show sensor $pos on LED&quot;\" line65=\"    //% group=&quot;Debug&quot;\" line66=\"    export function showSensorOnLED(pos: SensorPosition): void {\" line67=\"        basic.forever(function () {\" line68=\"            if (sensorDetectsLine(pos)) {\" line69=\"                basic.showIcon(IconNames.Yes)\" line70=\"            } else {\" line71=\"                basic.clearScreen()\" line72=\"            }\" line73=\"        })\" line74=\"    }\" line75=\"\" line76=\"    /**\" line77=\"     * Move forward\" line78=\"     */\" line79=\"    //% block=&quot;move forward at speed $speed&quot;\" line80=\"    //% group=&quot;Motion&quot;\" line81=\"    export function moveForward(speed: number): void {\" line82=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line83=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line84=\"    }\" line85=\"\" line86=\"    /**\" line87=\"     * Turn left\" line88=\"     */\" line89=\"    //% block=&quot;turn left at speed $speed&quot;\" line90=\"    //% group=&quot;Motion&quot;\" line91=\"    export function turnLeft(speed: number): void {\" line92=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line93=\"        pins.analogWritePin(motorPWMPins[rightMotor], speed)\" line94=\"    }\" line95=\"\" line96=\"    /**\" line97=\"     * Turn right\" line98=\"     */\" line99=\"    //% block=&quot;turn right at speed $speed&quot;\" line100=\"    //% group=&quot;Motion&quot;\" line101=\"    export function turnRight(speed: number): void {\" line102=\"        pins.analogWritePin(motorPWMPins[leftMotor], speed)\" line103=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line104=\"    }\" line105=\"\" line106=\"    /**\" line107=\"     * Stop both motors\" line108=\"     */\" line109=\"    //% block=&quot;stop motors&quot;\" line110=\"    //% group=&quot;Motion&quot;\" line111=\"    export function stopMotors(): void {\" line112=\"        pins.analogWritePin(motorPWMPins[leftMotor], 0)\" line113=\"        pins.analogWritePin(motorPWMPins[rightMotor], 0)\" line114=\"    }\" line115=\"\" line116=\"    /**\" line117=\"     * Basic line following logic\" line118=\"     */\" line119=\"    //% block=&quot;follow line at speed $speed&quot;\" line120=\"    //% group=&quot;Line Following&quot;\" line121=\"    export function followLine(speed: number): void {\" line122=\"        if (sensorDetectsLine(SensorPosition.Center)) {\" line123=\"            moveForward(speed)\" line124=\"        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\" line125=\"            turnLeft(speed)\" line126=\"        } else if (sensorDetectsLine(SensorPosition.MidRight)) {\" line127=\"            turnRight(speed)\" line128=\"        } else {\" line129=\"            stopMotors()\" line130=\"        }\" line131=\"    }\" line132=\"}\" numlines=\"133\"></mutation></block></statement></block></xml>","main.ts":"namespace MakerLine {\n\n    export enum SensorPosition {\n        //% block=\"Left\"\n        Left,\n        //% block=\"Mid-Left\"\n        MidLeft,\n        //% block=\"Center\"\n        Center,\n        //% block=\"Mid-Right\"\n        MidRight,\n        //% block=\"Right\"\n        Right\n    }\n\n    export enum MotorChannel {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n\n    // IR sensor pin map (default wiring)\n    let pinMap: DigitalPin[] = [\n        DigitalPin.P16,  // Left\n        DigitalPin.P15,  // Mid-Left\n        DigitalPin.P14,  // Center\n        DigitalPin.P13,  // Mid-Right\n        DigitalPin.P12    // Right\n    ]\n\n    let leftMotor = MotorChannel.M1\n    let rightMotor = MotorChannel.M2\n\n    const motorPWMPins: AnalogPin[] = [\n        AnalogPin.P13, AnalogPin.P14, AnalogPin.P15, AnalogPin.P16\n    ]\n\n    /**\n     * Set the motor channels used for Motion:bit driving.\n     */\n    //% block=\"set left motor to $left and right motor to $right\"\n    //% group=\"Setup\"\n    export function setMotors(left: MotorChannel, right: MotorChannel): void {\n        leftMotor = left\n        rightMotor = right\n    }\n\n    /**\n     * Sensor detects black line\n     */\n    //% block=\"sensor $pos detects black line\"\n    //% group=\"Sensors\"\n    export function sensorDetectsLine(pos: SensorPosition): boolean {\n        return pins.digitalReadPin(pinMap[pos]) == 0\n    }\n\n    /**\n     * Show sensor state on LED (for testing)\n     */\n    //% block=\"show sensor $pos on LED\"\n    //% group=\"Debug\"\n    export function showSensorOnLED(pos: SensorPosition): void {\n        basic.forever(function () {\n            if (sensorDetectsLine(pos)) {\n                basic.showIcon(IconNames.Yes)\n            } else {\n                basic.clearScreen()\n            }\n        })\n    }\n\n    /**\n     * Move forward\n     */\n    //% block=\"move forward at speed $speed\"\n    //% group=\"Motion\"\n    export function moveForward(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn left\n     */\n    //% block=\"turn left at speed $speed\"\n    //% group=\"Motion\"\n    export function turnLeft(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], speed)\n    }\n\n    /**\n     * Turn right\n     */\n    //% block=\"turn right at speed $speed\"\n    //% group=\"Motion\"\n    export function turnRight(speed: number): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], speed)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Stop both motors\n     */\n    //% block=\"stop motors\"\n    //% group=\"Motion\"\n    export function stopMotors(): void {\n        pins.analogWritePin(motorPWMPins[leftMotor], 0)\n        pins.analogWritePin(motorPWMPins[rightMotor], 0)\n    }\n\n    /**\n     * Basic line following logic\n     */\n    //% block=\"follow line at speed $speed\"\n    //% group=\"Line Following\"\n    export function followLine(speed: number): void {\n        if (sensorDetectsLine(SensorPosition.Center)) {\n            moveForward(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidLeft)) {\n            turnLeft(speed)\n        } else if (sensorDetectsLine(SensorPosition.MidRight)) {\n            turnRight(speed)\n        } else {\n            stopMotors()\n        }\n    }\n}\n","README.md":"\n> Open this page at [https://scorubix29.github.io/makerline-motionbit/](https://scorubix29.github.io/makerline-motionbit/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/scorubix29/makerline-motionbit** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/scorubix29/makerline-motionbit** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","pxt.json":"{\n    \"name\": \"makerline-motionbit\",\n    \"version\": \"0.0.1\",\n    \"description\": \"Extension for 5 IR Line Sensors and Motion:bit motor control\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"microbit\": \"0.14.6\",\n        \"microbitSim\": \"0.14.6\",\n        \"target\": \"7.0.61\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}],"shares":[],"lastSaveTime":1750474291415}